{"message":"The system cannot find the path specified. (os error 3)","code":null,"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":2944,"byte_end":2987,"line_start":108,"line_end":108,"column_start":27,"column_end":70,"is_primary":true,"text":[{"text":"        Some(db) => match sqlx_macros::migrate!(\"db/sqlx/migrations\") {","highlight_start":27,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":2944,"byte_end":2987,"line_start":108,"line_end":108,"column_start":27,"column_end":70,"is_primary":false,"text":[{"text":"        Some(db) => match sqlx_macros::migrate!(\"db/sqlx/migrations\") {","highlight_start":27,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx_macros::migrate!","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2474,"byte_end":2523,"line_start":86,"line_end":86,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"pub fn migrate(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: The system cannot find the path specified. (os error 3)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:108:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Some(db) => match sqlx_macros::migrate!(\"db/sqlx/migrations\") {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `sqlx_macros::migrate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unused imports: `Deserialize`, `Serialize`, `futures`, `json::Json`, `response::status::Created`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":48,"byte_end":55,"line_start":3,"line_end":3,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    futures,","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":62,"byte_end":87,"line_start":4,"line_end":4,"column_start":5,"column_end":30,"is_primary":true,"text":[{"text":"    response::status::Created,","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":102,"byte_end":112,"line_start":5,"line_end":5,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"    serde::{json::Json, Deserialize, Serialize},","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":114,"byte_end":125,"line_start":5,"line_end":5,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"    serde::{json::Json, Deserialize, Serialize},","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":127,"byte_end":136,"line_start":5,"line_end":5,"column_start":38,"column_end":47,"is_primary":true,"text":[{"text":"    serde::{json::Json, Deserialize, Serialize},","highlight_start":38,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":41,"byte_end":137,"line_start":2,"line_end":5,"column_start":27,"column_end":48,"is_primary":true,"text":[{"text":"    fairing::{self, AdHoc},","highlight_start":27,"highlight_end":28},{"text":"    futures,","highlight_start":1,"highlight_end":13},{"text":"    response::status::Created,","highlight_start":1,"highlight_end":31},{"text":"    serde::{json::Json, Deserialize, Serialize},","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `Deserialize`, `Serialize`, `futures`, `json::Json`, `response::status::Created`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    futures,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    response::status::Created,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    serde::{json::Json, Deserialize, Serialize},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `Connection`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":192,"byte_end":202,"line_start":8,"line_end":8,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"use rocket_db_pools::{sqlx, Connection, Database};","highlight_start":29,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":190,"byte_end":202,"line_start":8,"line_end":8,"column_start":27,"column_end":39,"is_primary":true,"text":[{"text":"use rocket_db_pools::{sqlx, Connection, Database};","highlight_start":27,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `Connection`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:8:29\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rocket_db_pools::{sqlx, Connection, Database};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":1302,"byte_end":1310,"line_start":47,"line_end":47,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, User>(","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":1302,"byte_end":1306,"line_start":47,"line_end":47,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, User>(","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:47:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, User>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mhelp: remove this `mut`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"message":"use of moved value: `rows`","code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":1509,"byte_end":1519,"line_start":53,"line_end":53,"column_start":37,"column_end":47,"is_primary":false,"text":[{"text":"    while let Ok(Some(rows)) = rows.try_into() {","highlight_start":37,"highlight_end":47}],"label":"`rows` moved due to this method call, in previous iteration of loop","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":1302,"byte_end":1310,"line_start":47,"line_end":47,"column_start":9,"column_end":17,"is_primary":false,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, User>(","highlight_start":9,"highlight_end":17}],"label":"move occurs because `rows` has type `external_sqlx::query::QueryAs<'_, external_sqlx::Postgres, User, external_sqlx::postgres::PgArguments>`, which does not implement the `Copy` trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":1504,"byte_end":1508,"line_start":53,"line_end":53,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"    while let Ok(Some(rows)) = rows.try_into() {","highlight_start":32,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`try_into` takes ownership of the receiver `self`, which moves `rows`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\convert\\mod.rs","byte_start":21234,"byte_end":21238,"line_start":575,"line_end":575,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"    fn try_into(self) -> Result<T, Self::Error>;","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0382]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: use of moved value: `rows`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:53:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, User>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmove occurs because `rows` has type `external_sqlx::query::QueryAs<'_, external_sqlx::Postgres, User, external_sqlx::postgres::PgArguments>`, which does not implement the `Copy` trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    while let Ok(Some(rows)) = rows.try_into() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`rows` moved due to this method call, in previous iteration of loop\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `try_into` takes ownership of the receiver `self`, which moves `rows`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\convert\\mod.rs:575:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn try_into(self) -> Result<T, Self::Error>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"message":"the trait bound `User: external_sqlx::Decode<'_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":1784,"byte_end":1789,"line_start":64,"line_end":64,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(insertion_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Decode<'_, _>` is not implemented for `User`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Decode<'r, DB>`:\n  <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\n  <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\nand 27 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `User: external_sqlx::Decode<'_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:64:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(insertion_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Decode<'_, _>` is not implemented for `User`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Decode<'r, DB>`:\u001b[0m\n\u001b[0m              <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\u001b[0m\n\u001b[0m              <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 27 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `User: external_sqlx::Type<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":1784,"byte_end":1789,"line_start":64,"line_end":64,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(insertion_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Type<_>` is not implemented for `User`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Type<DB>`:\n  <&T as external_sqlx::Type<DB>>\n  <() as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\nand 28 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `User: external_sqlx::Type<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:64:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(insertion_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Type<_>` is not implemented for `User`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Type<DB>`:\u001b[0m\n\u001b[0m              <&T as external_sqlx::Type<DB>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 28 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Caption: external_sqlx::Decode<'_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":1784,"byte_end":1789,"line_start":64,"line_end":64,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(insertion_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Decode<'_, _>` is not implemented for `Caption`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Decode<'r, DB>`:\n  <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\n  <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\nand 27 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Caption: external_sqlx::Decode<'_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:64:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(insertion_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Decode<'_, _>` is not implemented for `Caption`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Decode<'r, DB>`:\u001b[0m\n\u001b[0m              <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\u001b[0m\n\u001b[0m              <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 27 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Caption: external_sqlx::Type<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":1784,"byte_end":1789,"line_start":64,"line_end":64,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(insertion_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Type<_>` is not implemented for `Caption`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Type<DB>`:\n  <&T as external_sqlx::Type<DB>>\n  <() as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\nand 28 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Caption: external_sqlx::Type<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:64:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(insertion_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Type<_>` is not implemented for `Caption`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Type<DB>`:\u001b[0m\n\u001b[0m              <&T as external_sqlx::Type<DB>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 28 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `User: external_sqlx::Decode<'_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":2177,"byte_end":2182,"line_start":79,"line_end":79,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(update_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Decode<'_, _>` is not implemented for `User`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Decode<'r, DB>`:\n  <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\n  <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\nand 27 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `User: external_sqlx::Decode<'_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:79:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(update_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Decode<'_, _>` is not implemented for `User`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Decode<'r, DB>`:\u001b[0m\n\u001b[0m              <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\u001b[0m\n\u001b[0m              <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 27 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `User: external_sqlx::Type<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":2177,"byte_end":2182,"line_start":79,"line_end":79,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(update_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Type<_>` is not implemented for `User`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Type<DB>`:\n  <&T as external_sqlx::Type<DB>>\n  <() as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\nand 28 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `User: external_sqlx::Type<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:79:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(update_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Type<_>` is not implemented for `User`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Type<DB>`:\u001b[0m\n\u001b[0m              <&T as external_sqlx::Type<DB>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 28 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Caption: external_sqlx::Decode<'_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":2177,"byte_end":2182,"line_start":79,"line_end":79,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(update_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Decode<'_, _>` is not implemented for `Caption`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Decode<'r, DB>`:\n  <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\n  <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\nand 27 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Caption: external_sqlx::Decode<'_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:79:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(update_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Decode<'_, _>` is not implemented for `Caption`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Decode<'r, DB>`:\u001b[0m\n\u001b[0m              <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\u001b[0m\n\u001b[0m              <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 27 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Caption: external_sqlx::Type<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":2177,"byte_end":2182,"line_start":79,"line_end":79,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(update_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Type<_>` is not implemented for `Caption`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Type<DB>`:\n  <&T as external_sqlx::Type<DB>>\n  <() as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\nand 28 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Caption: external_sqlx::Type<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:79:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(update_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Type<_>` is not implemented for `Caption`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Type<DB>`:\u001b[0m\n\u001b[0m              <&T as external_sqlx::Type<DB>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 28 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `User: external_sqlx::Decode<'_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":2570,"byte_end":2575,"line_start":94,"line_end":94,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(deletion_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Decode<'_, _>` is not implemented for `User`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Decode<'r, DB>`:\n  <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\n  <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\nand 27 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `User: external_sqlx::Decode<'_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:94:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(deletion_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Decode<'_, _>` is not implemented for `User`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Decode<'r, DB>`:\u001b[0m\n\u001b[0m              <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\u001b[0m\n\u001b[0m              <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 27 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `User: external_sqlx::Type<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":2570,"byte_end":2575,"line_start":94,"line_end":94,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(deletion_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Type<_>` is not implemented for `User`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Type<DB>`:\n  <&T as external_sqlx::Type<DB>>\n  <() as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\nand 28 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `User: external_sqlx::Type<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:94:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(deletion_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Type<_>` is not implemented for `User`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Type<DB>`:\u001b[0m\n\u001b[0m              <&T as external_sqlx::Type<DB>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 28 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Caption: external_sqlx::Decode<'_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":2570,"byte_end":2575,"line_start":94,"line_end":94,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(deletion_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Decode<'_, _>` is not implemented for `Caption`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Decode<'r, DB>`:\n  <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\n  <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\nand 27 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Caption: external_sqlx::Decode<'_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:94:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(deletion_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Decode<'_, _>` is not implemented for `Caption`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Decode<'r, DB>`:\u001b[0m\n\u001b[0m              <&'r JsonRawValue as external_sqlx::Decode<'r, DB>>\u001b[0m\n\u001b[0m              <&'r [u8] as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <&'r str as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Decode<'r, external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 27 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `Caption: external_sqlx::Type<_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":2570,"byte_end":2575,"line_start":94,"line_end":94,"column_start":49,"column_end":54,"is_primary":true,"text":[{"text":"    let mut rows = external_sqlx::query_as::<_, Video>(deletion_args)","highlight_start":49,"highlight_end":54}],"label":"the trait `external_sqlx::Type<_>` is not implemented for `Caption`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `external_sqlx::Type<DB>`:\n  <&T as external_sqlx::Type<DB>>\n  <() as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\n  <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\nand 28 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`","code":null,"level":"note","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":true,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\data\\pg_client_interface.rs","byte_start":634,"byte_end":656,"line_start":29,"line_end":29,"column_start":10,"column_end":32,"is_primary":false,"text":[{"text":"#[derive(external_sqlx::FromRow)]","highlight_start":10,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(external_sqlx::FromRow)]","def_site_span":{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-macros-0.6.2\\src\\lib.rs","byte_start":2166,"byte_end":2223,"line_start":75,"line_end":75,"column_start":1,"column_end":58,"is_primary":false,"text":[{"text":"pub fn derive_from_row(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":671,"byte_end":676,"line_start":30,"line_end":30,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"pub struct Video {","highlight_start":12,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `external_sqlx::query_as`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs","byte_start":5029,"byte_end":5057,"line_start":174,"line_end":174,"column_start":8,"column_end":36,"is_primary":true,"text":[{"text":"    O: for<'r> FromRow<'r, DB::Row>,","highlight_start":8,"highlight_end":36}],"label":"required by this bound in `query_as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Caption: external_sqlx::Type<_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:94:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m94\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut rows = external_sqlx::query_as::<_, Video>(deletion_args)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `external_sqlx::Type<_>` is not implemented for `Caption`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `external_sqlx::Type<DB>`:\u001b[0m\n\u001b[0m              <&T as external_sqlx::Type<DB>>\u001b[0m\n\u001b[0m              <() as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m              <(T1, T2, T3, T4, T5, T6, T7) as external_sqlx::Type<external_sqlx::Postgres>>\u001b[0m\n\u001b[0m            and 28 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Video` to implement `for<'r> external_sqlx::FromRow<'r, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:29:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(external_sqlx::FromRow)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Video {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `external_sqlx::query_as`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\danie\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\sqlx-core-0.6.2\\src\\query_as.rs:174:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    O: for<'r> FromRow<'r, DB::Row>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `query_as`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the derive macro `external_sqlx::FromRow` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0284","explanation":"This error occurs when the compiler is unable to unambiguously infer the\nreturn type of a function or method which is generic on return type, such\nas the `collect` method for `Iterator`s.\n\nFor example:\n\n```compile_fail,E0284\nfn main() {\n    let n: u32 = 1;\n    let mut d: u64 = 2;\n    d = d + n.into();\n}\n```\n\nHere we have an addition of `d` and `n.into()`. Hence, `n.into()` can return\nany type `T` where `u64: Add<T>`. On the other hand, the `into` method can\nreturn any type where `u32: Into<T>`.\n\nThe author of this code probably wants `into()` to return a `u64`, but the\ncompiler can't be sure that there isn't another type `T` where both\n`u32: Into<T>` and `u64: Add<T>`.\n\nTo resolve this error, use a concrete type for the intermediate expression:\n\n```\nfn main() {\n    let n: u32 = 1;\n    let mut d: u64 = 2;\n    let m: u64 = n.into();\n    d = d + m;\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":3344,"byte_end":3358,"line_start":123,"line_end":123,"column_start":21,"column_end":35,"is_primary":false,"text":[{"text":"            .attach(Database::init())","highlight_start":21,"highlight_end":35}],"label":"type must be known at this point","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\data\\pg_client_interface.rs","byte_start":3337,"byte_end":3343,"line_start":123,"line_end":123,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"            .attach(Database::init())","highlight_start":14,"highlight_end":20}],"label":"cannot infer type of the type parameter `F` declared on the associated function `attach`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cannot satisfy `<_ as rocket_db_pools::Database>::Pool == _`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider specifying the generic argument","code":null,"level":"help","spans":[{"file_name":"src\\data\\pg_client_interface.rs","byte_start":3343,"byte_end":3343,"line_start":123,"line_end":123,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"            .attach(Database::init())","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"::<Initializer<Self>>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0284]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\data\\pg_client_interface.rs:123:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attach(Database::init())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mtype must be known at this point\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type of the type parameter `F` declared on the associated function `attach`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `<_ as rocket_db_pools::Database>::Pool == _`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider specifying the generic argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            .attach\u001b[0m\u001b[0m\u001b[38;5;10m::<Initializer<Self>>\u001b[0m\u001b[0m(Database::init())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++++++\u001b[0m\n\n"}
{"message":"aborting due to 15 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 15 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0284, E0382.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0277, E0284, E0382.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
